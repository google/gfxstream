load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

cc_library(
    name = "gfxstream_common_base",
    srcs = [
        "AlignedBuf.cpp",
        "CpuTime.cpp",
        "Debug.cpp",
        "FileUtils.cpp",
        "FunctorThread.cpp",
        "GLObjectCounter.cpp",
        "GraphicsObjectCounter.cpp",
        "LayoutResolver.cpp",
        "MemStream.cpp",
        "MemoryTracker.cpp",
        "MessageChannel.cpp",
        "PathUtils.cpp",
        "RingStreambuf.cpp",
        "StdioStream.cpp",
        "Stream.cpp",
        "StreamSerializing.cpp",
        "StringFormat.cpp",
        "SubAllocator.cpp",
        "System.cpp",
        "Tracing.cpp",
        "ring_buffer.cpp",
    ] + select({
        "@platforms//os:windows": [
            "SharedMemory_win32.cpp",
            "Thread_win32.cpp",
            "Win32UnicodeString.cpp",
        ],
        "@platforms//os:macos": [
            "SharedMemory_posix.cpp",
            "Thread_pthread.cpp",
        ],
        "@platforms//os:linux": [
            "SharedMemory_posix.cpp",
            "Thread_pthread.cpp",
        ],
    }),
    hdrs = glob([
        "include/**/*.hpp",
        "include/**/*.h",
    ]),
    defines = [
        "BUILDING_EMUGL_COMMON_SHARED",
        "dfatal=\"(void*)\"",
    ] + select({
        "@platforms//os:windows": [
            "WIN32_LEAN_AND_MEAN",
        ],
        "//conditions:default": [],
    }),
    includes = [
        "include",
    ],
    linkopts = select({
        "@platforms//os:linux": [
            "-ldl",
            "-lrt",
        ],
        "@platforms//os:windows": [
            "-DEFAULTLIB:Shlwapi.lib",
        ],
        "@platforms//os:macos": [
            "-framework Foundation",
            "-framework AppKit",
            "-framework IOKit",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        "@platforms//os:macos": [
            ":aemu-base-darwin",
        ],
        "@platforms//os:windows": [
            "@aemu//windows:compat",
        ],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gfxstream_common_base_tests",
    srcs = [
        "AlignedBuf_unittest.cpp",
        "ArraySize_unittest.cpp",
        "FileMatcher_unittest.cpp",
        "HybridEntityManager_unittest.cpp",
        "LayoutResolver_unittest.cpp",
        "LruCache_unittest.cpp",
        "ManagedDescriptor_unittest.cpp",
        "NoDestructor_unittest.cpp",
        "Optional_unittest.cpp",
        "RingStreambuf_unittest.cpp",
        "StringFormat_unittest.cpp",
        "SubAllocator_unittest.cpp",
        "TypeTraits_unittest.cpp",
        "WorkerThread_unittest.cpp",
        "ring_buffer_unittest.cpp",
    ] + select({
        "@platforms//os:windows": [
            "Win32UnicodeString_unittest.cpp",
        ],
        "//conditions:default": [],
    }),
    linkopts = [
        "-undefined error",
    ],
    deps = [
        "gfxstream_common_base",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_googletest//:gtest_main",
    ],
)
