load("@rules_cc//cc:defs.bzl", "cc_library", "cc_shared_library")
load("@rules_python//python:defs.bzl", "py_binary")

package(
    default_visibility = ["@//:gfxstream"],
)

cc_library(
    name = "angle_common",
    srcs = [
        "src/common/Float16ToFloat32.cpp",
        "src/common/MemoryBuffer.cpp",
        "src/common/PackedEGLEnums_autogen.cpp",
        "src/common/PackedEnums.cpp",
        "src/common/PackedGLEnums_autogen.cpp",
        "src/common/PoolAlloc.cpp",
        "src/common/RingBufferAllocator.cpp",
        "src/common/SimpleMutex.cpp",
        "src/common/WorkerThread.cpp",
        "src/common/aligned_memory.cpp",
        "src/common/android_util.cpp",
        "src/common/angleutils.cpp",
        "src/common/backtrace_utils_noop.cpp",
        "src/common/base/anglebase/sha1.cc",
        "src/common/debug.cpp",
        "src/common/entry_points_enum_autogen.cpp",
        "src/common/event_tracer.cpp",
        "src/common/mathutil.cpp",
        "src/common/matrix_utils.cpp",
        "src/common/platform_helpers.cpp",
        "src/common/string_utils.cpp",
        "src/common/system_utils.cpp",
        "src/common/system_utils_linux.cpp",
        "src/common/system_utils_posix.cpp",
        "src/common/third_party/xxhash/xxhash.c",
        "src/common/tls.cpp",
        "src/common/uniform_type_info_autogen.cpp",
        "src/common/utilities.cpp",
    ],
    hdrs = [
        "src/common/BinaryStream.h",
        "src/common/CircularBuffer.h",
        "src/common/Color.h",
        "src/common/Color.inc",
        "src/common/CompiledShaderState.h",
        "src/common/FastVector.h",
        "src/common/FixedQueue.h",
        "src/common/FixedVector.h",
        "src/common/MemoryBuffer.h",
        "src/common/Optional.h",
        "src/common/PackedCLEnums_autogen.h",
        "src/common/PackedEGLEnums_autogen.h",
        "src/common/PackedEnums.h",
        "src/common/PackedGLEnums_autogen.h",
        "src/common/PoolAlloc.h",
        "src/common/RingBufferAllocator.h",
        "src/common/SimpleMutex.h",
        "src/common/SynchronizedValue.h",
        "src/common/WorkerThread.h",
        "src/common/aligned_memory.h",
        "src/common/android_util.h",
        "src/common/angleutils.h",
        "src/common/apple_platform_utils.h",
        "src/common/backtrace_utils.h",
        "src/common/base/anglebase/base_export.h",
        "src/common/base/anglebase/containers/mru_cache.h",
        "src/common/base/anglebase/logging.h",
        "src/common/base/anglebase/macros.h",
        "src/common/base/anglebase/no_destructor.h",
        "src/common/base/anglebase/numerics/checked_math.h",
        "src/common/base/anglebase/numerics/checked_math_impl.h",
        "src/common/base/anglebase/numerics/clamped_math.h",
        "src/common/base/anglebase/numerics/clamped_math_impl.h",
        "src/common/base/anglebase/numerics/math_constants.h",
        "src/common/base/anglebase/numerics/ranges.h",
        "src/common/base/anglebase/numerics/safe_conversions.h",
        "src/common/base/anglebase/numerics/safe_conversions_arm_impl.h",
        "src/common/base/anglebase/numerics/safe_conversions_impl.h",
        "src/common/base/anglebase/numerics/safe_math.h",
        "src/common/base/anglebase/numerics/safe_math_arm_impl.h",
        "src/common/base/anglebase/numerics/safe_math_clang_gcc_impl.h",
        "src/common/base/anglebase/numerics/safe_math_shared_impl.h",
        "src/common/base/anglebase/sha1.h",
        "src/common/base/anglebase/sys_byteorder.h",
        "src/common/bitset_utils.h",
        "src/common/debug.h",
        "src/common/entry_points_enum_autogen.h",
        "src/common/event_tracer.h",
        "src/common/hash_containers.h",
        "src/common/hash_utils.h",
        "src/common/log_utils.h",
        "src/common/mathutil.h",
        "src/common/matrix_utils.h",
        "src/common/platform.h",
        "src/common/platform_helpers.h",
        "src/common/span.h",
        "src/common/string_utils.h",
        "src/common/system_utils.h",
        "src/common/third_party/xxhash/xxhash.h",
        "src/common/tls.h",
        "src/common/uniform_type_info_autogen.h",
        "src/common/utilities.h",
        "src/common/vector_utils.h",
        "src/libANGLE/CLBitField.h",
    ],
    defines = [
        # TODO: use bazel `select({})` on debug build condition.
        # Useful for debugging:
        # "ANGLE_ENABLE_DEBUG_TRACE=1",
        # "ANGLE_ENABLE_TRACE_EVENTS=1",
        # "ANGLE_ALWAYS_LOG_INFO=1",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_translator_headers",
        ":includes",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
)

py_binary(
    name = "angle_glslang_build_info",
    srcs = [
        "third_party/glslang/src/build_info.py",
    ],
    main = "third_party/glslang/src/build_info.py",
)

genrule(
    name = "angle_glslang_gen_build_info_h",
    srcs = [
        "third_party/glslang/src/CHANGES.md",
        "third_party/glslang/src/build_info.h.tmpl",
    ],
    outs = ["third_party/glslang/src/glslang/build_info.h"],
    cmd = "$(location angle_glslang_build_info) $$(dirname $(location third_party/glslang/src/CHANGES.md)) -i $(location third_party/glslang/src/build_info.h.tmpl) -o $(location third_party/glslang/src/glslang/build_info.h)",
    tools = [":angle_glslang_build_info"],
)

py_binary(
    name = "angle_glslang_gen_extension_headers",
    srcs = ["third_party/glslang/src/gen_extension_headers.py"],
    main = "third_party/glslang/src/gen_extension_headers.py",
)

genrule(
    name = "angle_glslang_glsl_intrinsic_header_h",
    srcs = [
        "third_party/glslang/src/glslang/ExtensionHeaders/GL_EXT_shader_realtime_clock.glsl",
    ],
    outs = [
        "third_party/glslang/src/glslang/glsl_intrinsic_header.h",
    ],
    cmd = "$(location angle_glslang_gen_extension_headers) -i $$(dirname $(location third_party/glslang/src/glslang/ExtensionHeaders/GL_EXT_shader_realtime_clock.glsl)) -o $(location third_party/glslang/src/glslang/glsl_intrinsic_header.h)",
    tools = [":angle_glslang_gen_extension_headers"],
)

cc_library(
    name = "angle_glslang_generated_headers",
    hdrs = [
        ":angle_glslang_gen_build_info_h",
        ":angle_glslang_glsl_intrinsic_header_h",
    ],
    copts = [
        "-Wno-logical-op-parentheses",
        "-Wno-gnu-redeclared-enum",
        "-Wno-sometimes-uninitialized",
        "-Wno-implicit-fallthrough",
        "-Ithird_party/glslang/src",
        # glslang is not clean under certain sanitizers
        "-fno-sanitize=float-cast-overflow,null,signed-integer-overflow",
    ],
    includes = ["."],
    linkstatic = 1,
)

cc_library(
    name = "angle_glslang",
    srcs = glob(
        [
            "third_party/glslang/src/glslang/CInterface/*.cpp",
            "third_party/glslang/src/glslang/GenericCodeGen/*.cpp",
            "third_party/glslang/src/glslang/HLSL/*.cpp",
            "third_party/glslang/src/glslang/MachineIndependent/*.cpp",
            "third_party/glslang/src/glslang/MachineIndependent/preprocessor/*.cpp",
        ],
        exclude = [
            "third_party/glslang/src/glslang/HLSL/pch.cpp",
            "third_party/glslang/src/glslang/HLSL/pch.h",
            "third_party/glslang/src/glslang/MachineIndependent/pch.cpp",
            "third_party/glslang/src/glslang/MachineIndependent/pch.h",
        ],
    ) + select({
        "@platforms//os:linux": [
            "third_party/glslang/src/glslang/OSDependent/Unix/ossource.cpp",
        ],
        "@platforms//os:windows": [
            "third_party/glslang/src/glslang/OSDependent/Windows/ossource.cpp",
        ],
    }),
    hdrs = glob([
        "third_party/glslang/src/glslang/HLSL/*.h",
        "third_party/glslang/src/glslang/Include/*.h",
        "third_party/glslang/src/glslang/MachineIndependent/*.h",
        "third_party/glslang/src/glslang/MachineIndependent/preprocessor/*.h",
    ]) + [
        "third_party/glslang/src/StandAlone/DirStackFileIncluder.h",
        "third_party/glslang/src/glslang/OSDependent/osinclude.h",
        "third_party/glslang/src/glslang/Public/ResourceLimits.h",
        "third_party/glslang/src/glslang/Public/ShaderLang.h",
    ],
    copts = [
        "-Wno-logical-op-parentheses",
        "-Wno-gnu-redeclared-enum",
        "-Wno-sometimes-uninitialized",
        "-Wno-implicit-fallthrough",
        # glslang is not clean under certain sanitizers
        "-fno-sanitize=float-cast-overflow,null,signed-integer-overflow",
    ],
    defines = [
        "AMD_EXTENSIONS",
        "ENABLE_HLSL",
        "ENABLE_OPT=1",
        "ENABLE_SPIRV",
        "GLSLANG_OSINCLUDE_UNIX",
        "NV_EXTENSIONS",
    ],
    includes = [
        "third_party/glslang/src",
        "third_party/glslang/src/glslang/MachineIndependent",
        "third_party/glslang/src/glslang/include",
    ],
    linkstatic = 1,
    deps = [":angle_glslang_generated_headers"],
)

cc_library(
    name = "angle_glslang_spirv",
    srcs = glob([
        "third_party/glslang/src/SPIRV/*.cpp",
        "third_party/glslang/src/SPIRV/CInterface/*.cpp",
    ]),
    hdrs = [
        "third_party/glslang/src/SPIRV/GLSL.ext.AMD.h",
        "third_party/glslang/src/SPIRV/GLSL.ext.ARM.h",
        "third_party/glslang/src/SPIRV/GLSL.ext.EXT.h",
        "third_party/glslang/src/SPIRV/GLSL.ext.KHR.h",
        "third_party/glslang/src/SPIRV/GLSL.ext.NV.h",
        "third_party/glslang/src/SPIRV/GLSL.ext.QCOM.h",
        "third_party/glslang/src/SPIRV/GLSL.std.450.h",
        "third_party/glslang/src/SPIRV/GlslangToSpv.h",
        "third_party/glslang/src/SPIRV/Logger.h",
        "third_party/glslang/src/SPIRV/NonSemanticDebugPrintf.h",
        "third_party/glslang/src/SPIRV/NonSemanticShaderDebugInfo100.h",
        "third_party/glslang/src/SPIRV/SPVRemapper.h",
        "third_party/glslang/src/SPIRV/SpvBuilder.h",
        "third_party/glslang/src/SPIRV/SpvTools.h",
        "third_party/glslang/src/SPIRV/bitutils.h",
        "third_party/glslang/src/SPIRV/disassemble.h",
        "third_party/glslang/src/SPIRV/doc.h",
        "third_party/glslang/src/SPIRV/hex_float.h",
        "third_party/glslang/src/SPIRV/spirv.hpp",
        "third_party/glslang/src/SPIRV/spvIR.h",
    ],
    copts = [
        "-Wno-logical-op-parentheses",
        "-Wno-gnu-redeclared-enum",
        "-Wno-sometimes-uninitialized",
        "-Wno-implicit-fallthrough",
        # glslang is not clean under certain sanitizers
        "-fno-sanitize=float-cast-overflow,null,signed-integer-overflow",
    ],
    includes = [
        "third_party/glslang/src",
    ],
    linkstatic = 1,
    deps = [
        ":angle_glslang",
        ":angle_glslang_generated_headers",
        "@spirv_tools//:spirv_tools_opt",
    ],
)

cc_library(
    name = "angle_common_shader_state",
    srcs = [
        "src/common/CompiledShaderState.cpp",
    ],
    hdrs = [
        "src/common/BinaryStream.h",
        "src/common/CircularBuffer.h",
        "src/common/Color.h",
        "src/common/Color.inc",
        "src/common/CompiledShaderState.h",
        "src/common/FastVector.h",
        "src/common/FixedQueue.h",
        "src/common/FixedVector.h",
        "src/common/MemoryBuffer.h",
        "src/common/Optional.h",
        "src/common/PackedCLEnums_autogen.h",
        "src/common/PackedEGLEnums_autogen.h",
        "src/common/PackedEnums.h",
        "src/common/PackedGLEnums_autogen.h",
        "src/common/PoolAlloc.h",
        "src/common/RingBufferAllocator.h",
        "src/common/SimpleMutex.h",
        "src/common/SynchronizedValue.h",
        "src/common/WorkerThread.h",
        "src/common/aligned_memory.h",
        "src/common/android_util.h",
        "src/common/angleutils.h",
        "src/common/apple_platform_utils.h",
        "src/common/backtrace_utils.h",
        "src/common/base/anglebase/base_export.h",
        "src/common/base/anglebase/containers/mru_cache.h",
        "src/common/base/anglebase/logging.h",
        "src/common/base/anglebase/macros.h",
        "src/common/base/anglebase/no_destructor.h",
        "src/common/base/anglebase/numerics/checked_math.h",
        "src/common/base/anglebase/numerics/checked_math_impl.h",
        "src/common/base/anglebase/numerics/clamped_math.h",
        "src/common/base/anglebase/numerics/clamped_math_impl.h",
        "src/common/base/anglebase/numerics/math_constants.h",
        "src/common/base/anglebase/numerics/ranges.h",
        "src/common/base/anglebase/numerics/safe_conversions.h",
        "src/common/base/anglebase/numerics/safe_conversions_arm_impl.h",
        "src/common/base/anglebase/numerics/safe_conversions_impl.h",
        "src/common/base/anglebase/numerics/safe_math.h",
        "src/common/base/anglebase/numerics/safe_math_arm_impl.h",
        "src/common/base/anglebase/numerics/safe_math_clang_gcc_impl.h",
        "src/common/base/anglebase/numerics/safe_math_shared_impl.h",
        "src/common/base/anglebase/sha1.h",
        "src/common/base/anglebase/sys_byteorder.h",
        "src/common/bitset_utils.h",
        "src/common/debug.h",
        "src/common/entry_points_enum_autogen.h",
        "src/common/event_tracer.h",
        "src/common/hash_containers.h",
        "src/common/hash_utils.h",
        "src/common/log_utils.h",
        "src/common/mathutil.h",
        "src/common/matrix_utils.h",
        "src/common/platform.h",
        "src/common/platform_helpers.h",
        "src/common/span.h",
        "src/common/string_utils.h",
        "src/common/system_utils.h",
        "src/common/tls.h",
        "src/common/uniform_type_info_autogen.h",
        "src/common/utilities.h",
        "src/common/vector_utils.h",
        "src/libANGLE/CLBitField.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_translator_headers",
        ":includes",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
)

cc_library(
    name = "angle_compression",
    linkstatic = True,
    deps = [
        "@zlib_android//:zlib",
    ],
)

cc_library(
    name = "angle_frame_capture_mock",
    srcs = [
        "src/libANGLE/capture/FrameCapture_mock.cpp",
        "src/libANGLE/capture/serialize_mock.cpp",
    ],
    hdrs = [
        "src/common/frame_capture_utils.h",
        "src/common/frame_capture_utils_autogen.h",
        "src/common/gl_enum_utils_autogen.h",
        "src/libANGLE/capture/FrameCapture.h",
        "src/libANGLE/capture/serialize.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_CAPTURE_ENABLED=0",
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "LIBANGLE_IMPLEMENTATION",
    ],
    deps = [
        ":libangle_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_gl_enum_utils",
    srcs = [
        "src/common/gl_enum_utils.cpp",
        "src/common/gl_enum_utils_autogen.cpp",
    ],
    hdrs = [
        "src/common/gl_enum_utils.h",
        "src/common/gl_enum_utils_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_gpu_info_util",
    srcs = [
        "src/gpu_info_util/SystemInfo.cpp",
        "src/gpu_info_util/SystemInfo_linux.cpp",
        "src/gpu_info_util/SystemInfo_vulkan.cpp",
    ],
    hdrs = [
        "src/gpu_info_util/SystemInfo.h",
        "src/gpu_info_util/SystemInfo_internal.h",
        "src/gpu_info_util/SystemInfo_vulkan.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_CRC_FOR_PIPELINE_CACHE",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_ENABLE_VULKAN_SHARED_RING_BUFFER_CMD_ALLOC=false",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_libvulkan_loader",
        ":angle_vulkan_icd",
    ],
)

cc_library(
    name = "angle_image_util",
    srcs = [
        "src/image_util/AstcDecompressorNoOp.cpp",
        "src/image_util/copyimage.cpp",
        "src/image_util/imageformats.cpp",
        "src/image_util/loadimage.cpp",
        "src/image_util/loadimage_astc.cpp",
        "src/image_util/loadimage_etc.cpp",
        "src/image_util/loadimage_paletted.cpp",
        "src/image_util/storeimage_paletted.cpp",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_image_util_headers",
    ],
)

cc_library(
    name = "angle_image_util_headers",
    hdrs = [
        "src/image_util/AstcDecompressor.h",
        "src/image_util/copyimage.h",
        "src/image_util/copyimage.inc",
        "src/image_util/generatemip.h",
        "src/image_util/generatemip.inc",
        "src/image_util/imageformats.h",
        "src/image_util/loadimage.h",
        "src/image_util/loadimage.inc",
        "src/image_util/storeimage.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_translator_headers",
    hdrs = [
        "include/GLSLANG/ShaderLang.h",
        "include/GLSLANG/ShaderVars.h",
        "src/compiler/translator/blocklayout.h",
        "src/compiler/translator/hlsl/blocklayoutHLSL.h",
    ],
    includes = [
        "include/",
        "src/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":includes",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_version",
    hdrs = [
        "src/common/angle_version.h",
    ],
    includes = [
        ".",
        "include/",
        "out/Temp/gen/angle/",
        "src/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_commit_id",
        ":angle_program_version_id",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_commit_id",
    hdrs = [
        "angle_commit.h",
    ],
)

genrule(
    name = "gen_angle_program_version_id",
    outs = [
        "ANGLEShaderProgramVersion.h",
    ],
    cmd = """cat << EOF > '$@'
#define ANGLE_PROGRAM_VERSION "cd4bff2f7b7063752d246c85b45a991e"
#define ANGLE_PROGRAM_VERSION_HASH_SIZE 32
EOF""",
)

cc_library(
    name = "angle_program_version_id",
    hdrs = [
        ":gen_angle_program_version_id",
    ],
)

cc_library(
    name = "angle_third_party_vulkan_headers",
    hdrs = glob([
        "third_party/vulkan-headers/src/include/**/*.h",
    ]),
    strip_include_prefix = "third_party/vulkan-headers/src/include",
)

cc_library(
    name = "angle_volk",
    srcs = [
        "src/third_party/volk/volk.c",
    ],
    hdrs = [
        "src/third_party/volk/volk.h",
    ],
    includes = [
        "src/third_party/volk",
        "third_party/vulkan-headers/src/include",
    ],
    deps = [
        ":angle_third_party_vulkan_headers",
    ],
)

cc_library(
    name = "angle_version_info",
    srcs = [
        "src/common/angle_version_info.cpp",
    ],
    hdrs = [
        "src/common/angle_version_info.h",
    ],
    includes = [
        "include/",
        "out/Temp/gen/angle/",
        "src/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_translator_headers",
        ":angle_version",
    ],
    alwayslink = True,
)

cc_library(
    name = "includes",
    hdrs = [
        "include/EGL/egl.h",
        "include/EGL/eglext.h",
        "include/EGL/eglext_angle.h",
        "include/EGL/eglplatform.h",
        "include/GLES/gl.h",
        "include/GLES/glext.h",
        "include/GLES/glplatform.h",
        "include/GLES2/gl2.h",
        "include/GLES2/gl2ext.h",
        "include/GLES2/gl2ext_angle.h",
        "include/GLES2/gl2platform.h",
        "include/GLES3/gl3.h",
        "include/GLES3/gl31.h",
        "include/GLES3/gl32.h",
        "include/GLES3/gl3platform.h",
        "include/GLX/glxext.h",
        "include/KHR/khrplatform.h",
        "include/WGL/wgl.h",
        "include/angle_gl.h",
        "include/export.h",
        "include/platform/Feature.h",
        "include/platform/PlatformMethods.h",
        "include/platform/autogen/FeaturesD3D_autogen.h",
        "include/platform/autogen/FeaturesGL_autogen.h",
        "include/platform/autogen/FeaturesMtl_autogen.h",
        "include/platform/autogen/FeaturesVk_autogen.h",
        "include/platform/autogen/FrontendFeatures_autogen.h",
        "include/vulkan/vulkan_fuchsia_ext.h",
    ],
    includes = [
        "include/",
        "src/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    alwayslink = True,
)

cc_library(
    name = "libangle",
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "src/third_party/volk/",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_CAPTURE_ENABLED=0",
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_CRC_FOR_PIPELINE_CACHE",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_ENABLE_VULKAN_SHARED_RING_BUFFER_CMD_ALLOC=false",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_CUSTOM_VULKAN_OUTSIDE_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_CUSTOM_VULKAN_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "LIBANGLE_IMPLEMENTATION",
    ],
    deps = [
        ":angle_frame_capture_mock",
        ":angle_gl_enum_utils",
        ":angle_vulkan_backend",
        ":libangle_no_vulkan",
    ],
    alwayslink = True,
)

cc_library(
    name = "libangle_headers",
    hdrs = [
        "src/common/base/anglebase/trace_event/trace_event.h",
        "src/libANGLE/AttributeMap.h",
        "src/libANGLE/BlobCache.h",
        "src/libANGLE/Buffer.h",
        "src/libANGLE/CLBitField.h",
        "src/libANGLE/CLObject.h",
        "src/libANGLE/CLPlatform.h",
        "src/libANGLE/CLRefPointer.h",
        "src/libANGLE/Caps.h",
        "src/libANGLE/Compiler.h",
        "src/libANGLE/Config.h",
        "src/libANGLE/Constants.h",
        "src/libANGLE/Context.h",
        "src/libANGLE/Context.inl.h",
        "src/libANGLE/ContextMutex.h",
        "src/libANGLE/Context_gles_1_0_autogen.h",
        "src/libANGLE/Context_gles_2_0_autogen.h",
        "src/libANGLE/Context_gles_3_0_autogen.h",
        "src/libANGLE/Context_gles_3_1_autogen.h",
        "src/libANGLE/Context_gles_3_2_autogen.h",
        "src/libANGLE/Context_gles_ext_autogen.h",
        "src/libANGLE/Debug.h",
        "src/libANGLE/Device.h",
        "src/libANGLE/Display.h",
        "src/libANGLE/EGLSync.h",
        "src/libANGLE/Error.h",
        "src/libANGLE/Error.inc",
        "src/libANGLE/ErrorStrings.h",
        "src/libANGLE/Fence.h",
        "src/libANGLE/Framebuffer.h",
        "src/libANGLE/FramebufferAttachment.h",
        "src/libANGLE/GLES1Renderer.h",
        "src/libANGLE/GLES1Shaders.inc",
        "src/libANGLE/GLES1State.h",
        "src/libANGLE/GlobalMutex.h",
        "src/libANGLE/HandleAllocator.h",
        "src/libANGLE/Image.h",
        "src/libANGLE/ImageIndex.h",
        "src/libANGLE/IndexRangeCache.h",
        "src/libANGLE/InfoLog.h",
        "src/libANGLE/LoggingAnnotator.h",
        "src/libANGLE/MemoryObject.h",
        "src/libANGLE/MemoryProgramCache.h",
        "src/libANGLE/MemoryShaderCache.h",
        "src/libANGLE/Observer.h",
        "src/libANGLE/Overlay.h",
        "src/libANGLE/OverlayWidgets.h",
        "src/libANGLE/Overlay_autogen.h",
        "src/libANGLE/Overlay_font_autogen.h",
        "src/libANGLE/PixelLocalStorage.h",
        "src/libANGLE/Program.h",
        "src/libANGLE/ProgramExecutable.h",
        "src/libANGLE/ProgramLinkedResources.h",
        "src/libANGLE/ProgramPipeline.h",
        "src/libANGLE/Query.h",
        "src/libANGLE/RefCountObject.h",
        "src/libANGLE/Renderbuffer.h",
        "src/libANGLE/ResourceManager.h",
        "src/libANGLE/ResourceMap.h",
        "src/libANGLE/Sampler.h",
        "src/libANGLE/Semaphore.h",
        "src/libANGLE/Shader.h",
        "src/libANGLE/ShareGroup.h",
        "src/libANGLE/SizedMRUCache.h",
        "src/libANGLE/State.h",
        "src/libANGLE/Stream.h",
        "src/libANGLE/Surface.h",
        "src/libANGLE/Texture.h",
        "src/libANGLE/Thread.h",
        "src/libANGLE/TransformFeedback.h",
        "src/libANGLE/Uniform.h",
        "src/libANGLE/VaryingPacking.h",
        "src/libANGLE/Version.h",
        "src/libANGLE/Version.inc",
        "src/libANGLE/VertexArray.h",
        "src/libANGLE/VertexAttribute.h",
        "src/libANGLE/VertexAttribute.inc",
        "src/libANGLE/angletypes.h",
        "src/libANGLE/angletypes.inc",
        "src/libANGLE/cl_types.h",
        "src/libANGLE/context_private_call.inl.h",
        "src/libANGLE/context_private_call_autogen.h",
        "src/libANGLE/entry_points_utils.h",
        "src/libANGLE/features.h",
        "src/libANGLE/formatutils.h",
        "src/libANGLE/gles_extensions_autogen.h",
        "src/libANGLE/histogram_macros.h",
        "src/libANGLE/queryconversions.h",
        "src/libANGLE/queryutils.h",
        "src/libANGLE/renderer/BufferImpl.h",
        "src/libANGLE/renderer/CLCommandQueueImpl.h",
        "src/libANGLE/renderer/CLContextImpl.h",
        "src/libANGLE/renderer/CLDeviceImpl.h",
        "src/libANGLE/renderer/CLEventImpl.h",
        "src/libANGLE/renderer/CLExtensions.h",
        "src/libANGLE/renderer/CLKernelImpl.h",
        "src/libANGLE/renderer/CLMemoryImpl.h",
        "src/libANGLE/renderer/CLPlatformImpl.h",
        "src/libANGLE/renderer/CLProgramImpl.h",
        "src/libANGLE/renderer/CLSamplerImpl.h",
        "src/libANGLE/renderer/CompilerImpl.h",
        "src/libANGLE/renderer/ContextImpl.h",
        "src/libANGLE/renderer/DeviceImpl.h",
        "src/libANGLE/renderer/DisplayImpl.h",
        "src/libANGLE/renderer/EGLImplFactory.h",
        "src/libANGLE/renderer/EGLReusableSync.h",
        "src/libANGLE/renderer/EGLSyncImpl.h",
        "src/libANGLE/renderer/FenceNVImpl.h",
        "src/libANGLE/renderer/Format.h",
        "src/libANGLE/renderer/FormatID_autogen.h",
        "src/libANGLE/renderer/FramebufferAttachmentObjectImpl.h",
        "src/libANGLE/renderer/FramebufferImpl.h",
        "src/libANGLE/renderer/GLImplFactory.h",
        "src/libANGLE/renderer/ImageImpl.h",
        "src/libANGLE/renderer/MemoryObjectImpl.h",
        "src/libANGLE/renderer/OverlayImpl.h",
        "src/libANGLE/renderer/ProgramExecutableImpl.h",
        "src/libANGLE/renderer/ProgramImpl.h",
        "src/libANGLE/renderer/ProgramPipelineImpl.h",
        "src/libANGLE/renderer/QueryImpl.h",
        "src/libANGLE/renderer/RenderTargetCache.h",
        "src/libANGLE/renderer/RenderbufferImpl.h",
        "src/libANGLE/renderer/SamplerImpl.h",
        "src/libANGLE/renderer/SemaphoreImpl.h",
        "src/libANGLE/renderer/ShaderImpl.h",
        "src/libANGLE/renderer/ShareGroupImpl.h",
        "src/libANGLE/renderer/StreamProducerImpl.h",
        "src/libANGLE/renderer/SurfaceImpl.h",
        "src/libANGLE/renderer/SyncImpl.h",
        "src/libANGLE/renderer/TextureImpl.h",
        "src/libANGLE/renderer/TransformFeedbackImpl.h",
        "src/libANGLE/renderer/VertexArrayImpl.h",
        "src/libANGLE/renderer/copyvertex.h",
        "src/libANGLE/renderer/copyvertex.inc.h",
        "src/libANGLE/renderer/driver_utils.h",
        "src/libANGLE/renderer/gl/functionsgl_enums.h",
        "src/libANGLE/renderer/load_functions_table.h",
        "src/libANGLE/renderer/renderer_utils.h",
        "src/libANGLE/renderer/serial_utils.h",
        "src/libANGLE/renderer/vulkan/DisplayVk_api.h",
        "src/libANGLE/trace.h",
        "src/libANGLE/validationEGL.h",
        "src/libANGLE/validationEGL_autogen.h",
        "src/libANGLE/validationES.h",
        "src/libANGLE/validationES1.h",
        "src/libANGLE/validationES1_autogen.h",
        "src/libANGLE/validationES2.h",
        "src/libANGLE/validationES2_autogen.h",
        "src/libANGLE/validationES3.h",
        "src/libANGLE/validationES31.h",
        "src/libANGLE/validationES31_autogen.h",
        "src/libANGLE/validationES32.h",
        "src/libANGLE/validationES32_autogen.h",
        "src/libANGLE/validationES3_autogen.h",
        "src/libANGLE/validationESEXT.h",
        "src/libANGLE/validationESEXT_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "LIBANGLE_IMPLEMENTATION",
    ],
    deps = [
        ":angle_common",
        ":angle_translator_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "libangle_no_vulkan",
    srcs = [
        "src/libANGLE/AttributeMap.cpp",
        "src/libANGLE/BlobCache.cpp",
        "src/libANGLE/Buffer.cpp",
        "src/libANGLE/Caps.cpp",
        "src/libANGLE/Compiler.cpp",
        "src/libANGLE/Config.cpp",
        "src/libANGLE/Context.cpp",
        "src/libANGLE/ContextMutex.cpp",
        "src/libANGLE/Context_gles_1_0.cpp",
        "src/libANGLE/Debug.cpp",
        "src/libANGLE/Device.cpp",
        "src/libANGLE/Display.cpp",
        "src/libANGLE/EGLSync.cpp",
        "src/libANGLE/Error.cpp",
        "src/libANGLE/Fence.cpp",
        "src/libANGLE/Framebuffer.cpp",
        "src/libANGLE/FramebufferAttachment.cpp",
        "src/libANGLE/GLES1Renderer.cpp",
        "src/libANGLE/GLES1State.cpp",
        "src/libANGLE/GlobalMutex.cpp",
        "src/libANGLE/HandleAllocator.cpp",
        "src/libANGLE/Image.cpp",
        "src/libANGLE/ImageIndex.cpp",
        "src/libANGLE/IndexRangeCache.cpp",
        "src/libANGLE/LoggingAnnotator.cpp",
        "src/libANGLE/MemoryObject.cpp",
        "src/libANGLE/MemoryProgramCache.cpp",
        "src/libANGLE/MemoryShaderCache.cpp",
        "src/libANGLE/Observer.cpp",
        "src/libANGLE/Overlay.cpp",
        "src/libANGLE/OverlayWidgets.cpp",
        "src/libANGLE/Overlay_autogen.cpp",
        "src/libANGLE/Overlay_font_autogen.cpp",
        "src/libANGLE/PixelLocalStorage.cpp",
        "src/libANGLE/Platform.cpp",
        "src/libANGLE/Program.cpp",
        "src/libANGLE/ProgramExecutable.cpp",
        "src/libANGLE/ProgramLinkedResources.cpp",
        "src/libANGLE/ProgramPipeline.cpp",
        "src/libANGLE/Query.cpp",
        "src/libANGLE/Renderbuffer.cpp",
        "src/libANGLE/ResourceManager.cpp",
        "src/libANGLE/Sampler.cpp",
        "src/libANGLE/Semaphore.cpp",
        "src/libANGLE/Shader.cpp",
        "src/libANGLE/ShareGroup.cpp",
        "src/libANGLE/State.cpp",
        "src/libANGLE/Stream.cpp",
        "src/libANGLE/Surface.cpp",
        "src/libANGLE/Texture.cpp",
        "src/libANGLE/Thread.cpp",
        "src/libANGLE/TransformFeedback.cpp",
        "src/libANGLE/Uniform.cpp",
        "src/libANGLE/VaryingPacking.cpp",
        "src/libANGLE/VertexArray.cpp",
        "src/libANGLE/VertexAttribute.cpp",
        "src/libANGLE/angletypes.cpp",
        "src/libANGLE/es3_copy_conversion_table_autogen.cpp",
        "src/libANGLE/format_map_autogen.cpp",
        "src/libANGLE/formatutils.cpp",
        "src/libANGLE/gles_extensions_autogen.cpp",
        "src/libANGLE/queryconversions.cpp",
        "src/libANGLE/queryutils.cpp",
        "src/libANGLE/renderer/BufferImpl.cpp",
        "src/libANGLE/renderer/ContextImpl.cpp",
        "src/libANGLE/renderer/DeviceImpl.cpp",
        "src/libANGLE/renderer/DisplayImpl.cpp",
        "src/libANGLE/renderer/EGLReusableSync.cpp",
        "src/libANGLE/renderer/EGLSyncImpl.cpp",
        "src/libANGLE/renderer/Format_table_autogen.cpp",
        "src/libANGLE/renderer/FramebufferImpl.cpp",
        "src/libANGLE/renderer/ImageImpl.cpp",
        "src/libANGLE/renderer/ProgramImpl.cpp",
        "src/libANGLE/renderer/ProgramPipelineImpl.cpp",
        "src/libANGLE/renderer/QueryImpl.cpp",
        "src/libANGLE/renderer/RenderbufferImpl.cpp",
        "src/libANGLE/renderer/ShaderImpl.cpp",
        "src/libANGLE/renderer/SurfaceImpl.cpp",
        "src/libANGLE/renderer/TextureImpl.cpp",
        "src/libANGLE/renderer/TransformFeedbackImpl.cpp",
        "src/libANGLE/renderer/VertexArrayImpl.cpp",
        "src/libANGLE/renderer/driver_utils.cpp",
        "src/libANGLE/renderer/load_functions_table_autogen.cpp",
        "src/libANGLE/renderer/renderer_utils.cpp",
        "src/libANGLE/validationEGL.cpp",
        "src/libANGLE/validationES.cpp",
        "src/libANGLE/validationES1.cpp",
        "src/libANGLE/validationES2.cpp",
        "src/libANGLE/validationES3.cpp",
        "src/libANGLE/validationES31.cpp",
        "src/libANGLE/validationES32.cpp",
        "src/libANGLE/validationESEXT.cpp",
    ],
    hdrs = [
        "src/common/frame_capture_utils.h",
        "src/common/frame_capture_utils_autogen.h",
        "src/common/gl_enum_utils.h",
        "src/common/gl_enum_utils_autogen.h",
        "src/libANGLE/capture/FrameCapture.h",
        "src/libANGLE/capture/capture_cl_autogen.h",
        "src/libANGLE/capture/capture_egl_autogen.h",
        "src/libANGLE/capture/capture_gles_1_0_autogen.h",
        "src/libANGLE/capture/capture_gles_2_0_autogen.h",
        "src/libANGLE/capture/capture_gles_3_0_autogen.h",
        "src/libANGLE/capture/capture_gles_3_1_autogen.h",
        "src/libANGLE/capture/capture_gles_3_2_autogen.h",
        "src/libANGLE/capture/capture_gles_ext_autogen.h",
        "src/libANGLE/capture/serialize.h",
    ],
    copts = [
        "-Wno-ctad-maybe-unsupported",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_CRC_FOR_PIPELINE_CACHE",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_ENABLE_VULKAN_SHARED_RING_BUFFER_CMD_ALLOC=false",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "LIBANGLE_IMPLEMENTATION",
    ],
    deps = [
        ":angle_common",
        ":angle_common_shader_state",
        ":angle_compression",
        ":angle_gpu_info_util",
        ":angle_image_util",
        ":angle_version_info",
        ":includes",
        ":libangle_headers",
        ":translator",
    ],
    alwayslink = True,
)

cc_library(
    name = "libegl",
    srcs = [
        "src/libEGL/libEGL_autogen.cpp",
    ],
    hdrs = [
        "src/libEGL/egl_loader_autogen.h",
        "src/libEGL/resource.h",
        "src/libGLESv2/entry_points_egl_autogen.h",
        "src/libGLESv2/entry_points_egl_ext_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        'ANGLE_DISPATCH_LIBRARY=\\\"libGLESv2.so\\\"',
        'ANGLE_EGL_LIBRARY_NAME=\\"libEGL\\"',
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        'ANGLE_GLESV2_LIBRARY_NAME=\\"libGLESv2\\"',
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_EGL_LOADER",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        'ANGLE_VULKAN_SECONDARIES_EGL_LIBRARY_NAME=\\"libEGL_vulkan_secondaries\\"',
        'ANGLE_VULKAN_SECONDARIES_GLESV2_LIBRARY_NAME=\\"libGLESv2_vulkan_secondaries\\"',
        'EGLAPI=__attribute__((visibility(\\"default\\")))',
        "EGL_EGLEXT_PROTOTYPES",
        "EGL_EGL_PROTOTYPES=1",
        "EGL_NO_X11",
        "GL_GLES_PROTOTYPES=1",
        "GL_GLEXT_PROTOTYPES",
        "LIBEGL_IMPLEMENTATION",
    ],
    deps = [
        ":angle_common",
        ":includes",
        ":libegl_egl_loader",
        ":libglesv2",
    ],
)

cc_library(
    name = "libegl_egl_loader",
    srcs = [
        "src/libEGL/egl_loader_autogen.cpp",
    ],
    hdrs = [
        "src/libEGL/egl_loader_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_EGL_LOADER",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_EGLEXT_PROTOTYPES",
        "EGL_EGL_PROTOTYPES=1",
        "EGL_NO_X11",
        "GL_GLES_PROTOTYPES=1",
        "GL_GLEXT_PROTOTYPES",
    ],
    deps = [
        ":includes",
    ],
    alwayslink = True,
)

cc_library(
    name = "libglesv2",
    srcs = [
        "src/libGLESv2/egl_ext_stubs.cpp",
        "src/libGLESv2/egl_stubs.cpp",
        "src/libGLESv2/egl_stubs_getprocaddress_autogen.cpp",
        "src/libGLESv2/entry_points_egl_autogen.cpp",
        "src/libGLESv2/entry_points_egl_ext_autogen.cpp",
        "src/libGLESv2/entry_points_gles_1_0_autogen.cpp",
        "src/libGLESv2/entry_points_gles_2_0_autogen.cpp",
        "src/libGLESv2/entry_points_gles_3_0_autogen.cpp",
        "src/libGLESv2/entry_points_gles_3_1_autogen.cpp",
        "src/libGLESv2/entry_points_gles_3_2_autogen.cpp",
        "src/libGLESv2/entry_points_gles_ext_autogen.cpp",
        "src/libGLESv2/global_state.cpp",
        "src/libGLESv2/libGLESv2_autogen.cpp",
    ],
    hdrs = [
        "src/libGLESv2/egl_context_lock_autogen.h",
        "src/libGLESv2/egl_context_lock_impl.h",
        "src/libGLESv2/egl_ext_stubs_autogen.h",
        "src/libGLESv2/egl_stubs_autogen.h",
        "src/libGLESv2/entry_points_egl_autogen.h",
        "src/libGLESv2/entry_points_egl_ext_autogen.h",
        "src/libGLESv2/entry_points_gles_1_0_autogen.h",
        "src/libGLESv2/entry_points_gles_2_0_autogen.h",
        "src/libGLESv2/entry_points_gles_3_0_autogen.h",
        "src/libGLESv2/entry_points_gles_3_1_autogen.h",
        "src/libGLESv2/entry_points_gles_3_2_autogen.h",
        "src/libGLESv2/entry_points_gles_ext_autogen.h",
        "src/libGLESv2/global_state.h",
        "src/libGLESv2/resource.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "src/third_party/volk/",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_CAPTURE_ENABLED=0",
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_CRC_FOR_PIPELINE_CACHE",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_ENABLE_VULKAN_SHARED_RING_BUFFER_CMD_ALLOC=false",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_CUSTOM_VULKAN_OUTSIDE_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_CUSTOM_VULKAN_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_EGLEXT_PROTOTYPES",
        "EGL_EGL_PROTOTYPES=1",
        "EGL_NO_X11",
        'GL_API=__attribute__((visibility(\\"default\\")))',
        'GL_APICALL=__attribute__((visibility(\\"default\\")))',
        "GL_GLES_PROTOTYPES=1",
        "GL_GLEXT_PROTOTYPES",
        "LIBANGLE_IMPLEMENTATION",
        "LIBGLESV2_IMPLEMENTATION",
    ],
    deps = [
        ":includes",
        ":libangle",
    ],
)

cc_library(
    name = "preprocessor",
    srcs = [
        "src/compiler/preprocessor/DiagnosticsBase.cpp",
        "src/compiler/preprocessor/DirectiveHandlerBase.cpp",
        "src/compiler/preprocessor/DirectiveParser.cpp",
        "src/compiler/preprocessor/Input.cpp",
        "src/compiler/preprocessor/Lexer.cpp",
        "src/compiler/preprocessor/Macro.cpp",
        "src/compiler/preprocessor/MacroExpander.cpp",
        "src/compiler/preprocessor/Preprocessor.cpp",
        "src/compiler/preprocessor/Token.cpp",
        "src/compiler/preprocessor/preprocessor_lex_autogen.cpp",
        "src/compiler/preprocessor/preprocessor_tab_autogen.cpp",
    ],
    hdrs = [
        "src/compiler/preprocessor/DiagnosticsBase.h",
        "src/compiler/preprocessor/DirectiveHandlerBase.h",
        "src/compiler/preprocessor/DirectiveParser.h",
        "src/compiler/preprocessor/ExpressionParser.h",
        "src/compiler/preprocessor/Input.h",
        "src/compiler/preprocessor/Lexer.h",
        "src/compiler/preprocessor/Macro.h",
        "src/compiler/preprocessor/MacroExpander.h",
        "src/compiler/preprocessor/Preprocessor.h",
        "src/compiler/preprocessor/SourceLocation.h",
        "src/compiler/preprocessor/Token.h",
        "src/compiler/preprocessor/Tokenizer.h",
        "src/compiler/preprocessor/numeric_lex.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_translator_headers",
    ],
)

cc_library(
    name = "translator",
    srcs = [
        "src/compiler/translator/BaseTypes.cpp",
        "src/compiler/translator/BuiltInFunctionEmulator.cpp",
        "src/compiler/translator/CallDAG.cpp",
        "src/compiler/translator/CodeGen.cpp",
        "src/compiler/translator/CollectVariables.cpp",
        "src/compiler/translator/Compiler.cpp",
        "src/compiler/translator/ConstantUnion.cpp",
        "src/compiler/translator/Declarator.cpp",
        "src/compiler/translator/Diagnostics.cpp",
        "src/compiler/translator/DirectiveHandler.cpp",
        "src/compiler/translator/ExtensionBehavior.cpp",
        "src/compiler/translator/FlagStd140Structs.cpp",
        "src/compiler/translator/FunctionLookup.cpp",
        "src/compiler/translator/HashNames.cpp",
        "src/compiler/translator/ImmutableStringBuilder.cpp",
        "src/compiler/translator/ImmutableString_autogen.cpp",
        "src/compiler/translator/InfoSink.cpp",
        "src/compiler/translator/Initialize.cpp",
        "src/compiler/translator/InitializeDll.cpp",
        "src/compiler/translator/IntermNode.cpp",
        "src/compiler/translator/IntermRebuild.cpp",
        "src/compiler/translator/IsASTDepthBelowLimit.cpp",
        "src/compiler/translator/Name.cpp",
        "src/compiler/translator/Operator.cpp",
        "src/compiler/translator/OutputTree.cpp",
        "src/compiler/translator/ParseContext.cpp",
        "src/compiler/translator/PoolAlloc.cpp",
        "src/compiler/translator/QualifierTypes.cpp",
        "src/compiler/translator/ShaderLang.cpp",
        "src/compiler/translator/ShaderVars.cpp",
        "src/compiler/translator/Symbol.cpp",
        "src/compiler/translator/SymbolTable.cpp",
        "src/compiler/translator/SymbolTable_autogen.cpp",
        "src/compiler/translator/SymbolUniqueId.cpp",
        "src/compiler/translator/Types.cpp",
        "src/compiler/translator/ValidateAST.cpp",
        "src/compiler/translator/ValidateBarrierFunctionCall.cpp",
        "src/compiler/translator/ValidateClipCullDistance.cpp",
        "src/compiler/translator/ValidateGlobalInitializer.cpp",
        "src/compiler/translator/ValidateLimitations.cpp",
        "src/compiler/translator/ValidateMaxParameters.cpp",
        "src/compiler/translator/ValidateOutputs.cpp",
        "src/compiler/translator/ValidateSwitch.cpp",
        "src/compiler/translator/ValidateTypeSizeLimitations.cpp",
        "src/compiler/translator/ValidateVaryingLocations.cpp",
        "src/compiler/translator/VariablePacker.cpp",
        "src/compiler/translator/blocklayout.cpp",
        "src/compiler/translator/glsl/OutputGLSL.cpp",
        "src/compiler/translator/glsl/OutputGLSLBase.cpp",
        "src/compiler/translator/glslang_lex_autogen.cpp",
        "src/compiler/translator/glslang_tab_autogen.cpp",
        "src/compiler/translator/spirv/BuildSPIRV.cpp",
        "src/compiler/translator/spirv/BuiltinsWorkaround.cpp",
        "src/compiler/translator/spirv/OutputSPIRV.cpp",
        "src/compiler/translator/spirv/TranslatorSPIRV.cpp",
        "src/compiler/translator/tree_ops/ClampFragDepth.cpp",
        "src/compiler/translator/tree_ops/ClampIndirectIndices.cpp",
        "src/compiler/translator/tree_ops/ClampPointSize.cpp",
        "src/compiler/translator/tree_ops/DeclareAndInitBuiltinsForInstancedMultiview.cpp",
        "src/compiler/translator/tree_ops/DeclarePerVertexBlocks.cpp",
        "src/compiler/translator/tree_ops/DeferGlobalInitializers.cpp",
        "src/compiler/translator/tree_ops/EmulateGLFragColorBroadcast.cpp",
        "src/compiler/translator/tree_ops/EmulateMultiDrawShaderBuiltins.cpp",
        "src/compiler/translator/tree_ops/FoldExpressions.cpp",
        "src/compiler/translator/tree_ops/ForcePrecisionQualifier.cpp",
        "src/compiler/translator/tree_ops/InitializeVariables.cpp",
        "src/compiler/translator/tree_ops/MonomorphizeUnsupportedFunctions.cpp",
        "src/compiler/translator/tree_ops/PreTransformTextureCubeGradDerivatives.cpp",
        "src/compiler/translator/tree_ops/PruneEmptyCases.cpp",
        "src/compiler/translator/tree_ops/PruneInfiniteLoops.cpp",
        "src/compiler/translator/tree_ops/PruneNoOps.cpp",
        "src/compiler/translator/tree_ops/RecordConstantPrecision.cpp",
        "src/compiler/translator/tree_ops/RemoveArrayLengthMethod.cpp",
        "src/compiler/translator/tree_ops/RemoveAtomicCounterBuiltins.cpp",
        "src/compiler/translator/tree_ops/RemoveDynamicIndexing.cpp",
        "src/compiler/translator/tree_ops/RemoveInactiveInterfaceVariables.cpp",
        "src/compiler/translator/tree_ops/RemoveInvariantDeclaration.cpp",
        "src/compiler/translator/tree_ops/RemoveUnreferencedVariables.cpp",
        "src/compiler/translator/tree_ops/RemoveUnusedFramebufferFetch.cpp",
        "src/compiler/translator/tree_ops/RescopeGlobalVariables.cpp",
        "src/compiler/translator/tree_ops/RewriteArrayOfArrayOfOpaqueUniforms.cpp",
        "src/compiler/translator/tree_ops/RewriteAtomicCounters.cpp",
        "src/compiler/translator/tree_ops/RewriteDfdy.cpp",
        "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "src/compiler/translator/tree_ops/RewriteStructSamplers.cpp",
        "src/compiler/translator/tree_ops/RewriteTexelFetchOffset.cpp",
        "src/compiler/translator/tree_ops/SeparateDeclarations.cpp",
        "src/compiler/translator/tree_ops/SeparateStructFromUniformDeclarations.cpp",
        "src/compiler/translator/tree_ops/SimplifyLoopConditions.cpp",
        "src/compiler/translator/tree_ops/SplitSequenceOperator.cpp",
        "src/compiler/translator/tree_ops/spirv/ClampGLLayer.cpp",
        "src/compiler/translator/tree_ops/spirv/EmulateAdvancedBlendEquations.cpp",
        "src/compiler/translator/tree_ops/spirv/EmulateDithering.cpp",
        "src/compiler/translator/tree_ops/spirv/EmulateFragColorData.cpp",
        "src/compiler/translator/tree_ops/spirv/EmulateFramebufferFetch.cpp",
        "src/compiler/translator/tree_ops/spirv/EmulateYUVBuiltIns.cpp",
        "src/compiler/translator/tree_ops/spirv/FlagSamplersWithTexelFetch.cpp",
        "src/compiler/translator/tree_ops/spirv/ReswizzleYUVOps.cpp",
        "src/compiler/translator/tree_ops/spirv/RewriteInterpolateAtOffset.cpp",
        "src/compiler/translator/tree_ops/spirv/RewriteR32fImages.cpp",
        "src/compiler/translator/tree_util/DriverUniform.cpp",
        "src/compiler/translator/tree_util/FindFunction.cpp",
        "src/compiler/translator/tree_util/FindMain.cpp",
        "src/compiler/translator/tree_util/FindPreciseNodes.cpp",
        "src/compiler/translator/tree_util/FindSymbolNode.cpp",
        "src/compiler/translator/tree_util/IntermNodePatternMatcher.cpp",
        "src/compiler/translator/tree_util/IntermNode_util.cpp",
        "src/compiler/translator/tree_util/IntermTraverse.cpp",
        "src/compiler/translator/tree_util/ReplaceArrayOfMatrixVarying.cpp",
        "src/compiler/translator/tree_util/ReplaceClipCullDistanceVariable.cpp",
        "src/compiler/translator/tree_util/ReplaceShadowingVariables.cpp",
        "src/compiler/translator/tree_util/ReplaceVariable.cpp",
        "src/compiler/translator/tree_util/RewriteSampleMaskVariable.cpp",
        "src/compiler/translator/tree_util/RunAtTheBeginningOfShader.cpp",
        "src/compiler/translator/tree_util/RunAtTheEndOfShader.cpp",
        "src/compiler/translator/tree_util/SpecializationConstant.cpp",
        "src/compiler/translator/util.cpp",
    ],
    hdrs = [
        "include/EGL/egl.h",
        "include/EGL/eglext.h",
        "include/EGL/eglplatform.h",
        "include/GLES2/gl2.h",
        "include/GLES2/gl2ext.h",
        "include/GLES2/gl2platform.h",
        "include/GLES3/gl3.h",
        "include/GLES3/gl31.h",
        "include/GLES3/gl32.h",
        "include/GLES3/gl3platform.h",
        "include/KHR/khrplatform.h",
        "include/angle_gl.h",
        "src/compiler/translator/AsNode.h",
        "src/compiler/translator/BaseTypes.h",
        "src/compiler/translator/BuiltInFunctionEmulator.h",
        "src/compiler/translator/CallDAG.h",
        "src/compiler/translator/CollectVariables.h",
        "src/compiler/translator/Common.h",
        "src/compiler/translator/Compiler.h",
        "src/compiler/translator/ConstantUnion.h",
        "src/compiler/translator/Declarator.h",
        "src/compiler/translator/Diagnostics.h",
        "src/compiler/translator/DirectiveHandler.h",
        "src/compiler/translator/ExtensionBehavior.h",
        "src/compiler/translator/FlagStd140Structs.h",
        "src/compiler/translator/FunctionLookup.h",
        "src/compiler/translator/HashNames.h",
        "src/compiler/translator/ImmutableString.h",
        "src/compiler/translator/ImmutableStringBuilder.h",
        "src/compiler/translator/InfoSink.h",
        "src/compiler/translator/Initialize.h",
        "src/compiler/translator/InitializeDll.h",
        "src/compiler/translator/InitializeGlobals.h",
        "src/compiler/translator/IntermNode.h",
        "src/compiler/translator/IntermRebuild.h",
        "src/compiler/translator/IsASTDepthBelowLimit.h",
        "src/compiler/translator/Name.h",
        "src/compiler/translator/NodeType.h",
        "src/compiler/translator/Operator_autogen.h",
        "src/compiler/translator/OutputTree.h",
        "src/compiler/translator/ParseContext.h",
        "src/compiler/translator/PoolAlloc.h",
        "src/compiler/translator/Pragma.h",
        "src/compiler/translator/QualifierTypes.h",
        "src/compiler/translator/Severity.h",
        "src/compiler/translator/StaticType.h",
        "src/compiler/translator/Symbol.h",
        "src/compiler/translator/SymbolTable.h",
        "src/compiler/translator/SymbolTable_autogen.h",
        "src/compiler/translator/SymbolUniqueId.h",
        "src/compiler/translator/Types.h",
        "src/compiler/translator/ValidateAST.h",
        "src/compiler/translator/ValidateBarrierFunctionCall.h",
        "src/compiler/translator/ValidateClipCullDistance.h",
        "src/compiler/translator/ValidateGlobalInitializer.h",
        "src/compiler/translator/ValidateLimitations.h",
        "src/compiler/translator/ValidateMaxParameters.h",
        "src/compiler/translator/ValidateOutputs.h",
        "src/compiler/translator/ValidateSwitch.h",
        "src/compiler/translator/ValidateTypeSizeLimitations.h",
        "src/compiler/translator/ValidateVaryingLocations.h",
        "src/compiler/translator/VariablePacker.h",
        "src/compiler/translator/blocklayout.h",
        "src/compiler/translator/glsl/BuiltInFunctionEmulatorGLSL.h",
        "src/compiler/translator/glsl/ExtensionGLSL.h",
        "src/compiler/translator/glsl/OutputESSL.h",
        "src/compiler/translator/glsl/OutputGLSL.h",
        "src/compiler/translator/glsl/OutputGLSLBase.h",
        "src/compiler/translator/glsl/TranslatorESSL.h",
        "src/compiler/translator/glsl/TranslatorGLSL.h",
        "src/compiler/translator/glsl/VersionGLSL.h",
        "src/compiler/translator/glslang.h",
        "src/compiler/translator/glslang_tab_autogen.h",
        "src/compiler/translator/hlsl/ASTMetadataHLSL.h",
        "src/compiler/translator/hlsl/AtomicCounterFunctionHLSL.h",
        "src/compiler/translator/hlsl/BuiltInFunctionEmulatorHLSL.h",
        "src/compiler/translator/hlsl/ImageFunctionHLSL.h",
        "src/compiler/translator/hlsl/OutputHLSL.h",
        "src/compiler/translator/hlsl/ResourcesHLSL.h",
        "src/compiler/translator/hlsl/ShaderStorageBlockFunctionHLSL.h",
        "src/compiler/translator/hlsl/ShaderStorageBlockOutputHLSL.h",
        "src/compiler/translator/hlsl/StructureHLSL.h",
        "src/compiler/translator/hlsl/TextureFunctionHLSL.h",
        "src/compiler/translator/hlsl/TranslatorHLSL.h",
        "src/compiler/translator/hlsl/UtilsHLSL.h",
        "src/compiler/translator/hlsl/blocklayoutHLSL.h",
        "src/compiler/translator/length_limits.h",
        "src/compiler/translator/msl/AstHelpers.h",
        "src/compiler/translator/msl/DebugSink.h",
        "src/compiler/translator/msl/DiscoverDependentFunctions.h",
        "src/compiler/translator/msl/DiscoverEnclosingFunctionTraverser.h",
        "src/compiler/translator/msl/DriverUniformMetal.h",
        "src/compiler/translator/msl/EmitMetal.h",
        "src/compiler/translator/msl/IdGen.h",
        "src/compiler/translator/msl/Layout.h",
        "src/compiler/translator/msl/MapFunctionsToDefinitions.h",
        "src/compiler/translator/msl/MapSymbols.h",
        "src/compiler/translator/msl/ModifyStruct.h",
        "src/compiler/translator/msl/Pipeline.h",
        "src/compiler/translator/msl/ProgramPrelude.h",
        "src/compiler/translator/msl/Reference.h",
        "src/compiler/translator/msl/RewritePipelines.h",
        "src/compiler/translator/msl/SkippingTraverser.h",
        "src/compiler/translator/msl/SymbolEnv.h",
        "src/compiler/translator/msl/ToposortStructs.h",
        "src/compiler/translator/msl/TranslatorMSL.h",
        "src/compiler/translator/msl/UtilsMSL.h",
        "src/compiler/translator/null/TranslatorNULL.h",
        "src/compiler/translator/spirv/BuildSPIRV.h",
        "src/compiler/translator/spirv/BuiltinsWorkaround.h",
        "src/compiler/translator/spirv/OutputSPIRV.h",
        "src/compiler/translator/spirv/TranslatorSPIRV.h",
        "src/compiler/translator/tree_ops/ClampFragDepth.h",
        "src/compiler/translator/tree_ops/ClampIndirectIndices.h",
        "src/compiler/translator/tree_ops/ClampPointSize.h",
        "src/compiler/translator/tree_ops/DeclareAndInitBuiltinsForInstancedMultiview.h",
        "src/compiler/translator/tree_ops/DeclarePerVertexBlocks.h",
        "src/compiler/translator/tree_ops/DeferGlobalInitializers.h",
        "src/compiler/translator/tree_ops/EmulateGLFragColorBroadcast.h",
        "src/compiler/translator/tree_ops/EmulateMultiDrawShaderBuiltins.h",
        "src/compiler/translator/tree_ops/FoldExpressions.h",
        "src/compiler/translator/tree_ops/ForcePrecisionQualifier.h",
        "src/compiler/translator/tree_ops/InitializeVariables.h",
        "src/compiler/translator/tree_ops/MonomorphizeUnsupportedFunctions.h",
        "src/compiler/translator/tree_ops/PreTransformTextureCubeGradDerivatives.h",
        "src/compiler/translator/tree_ops/PruneEmptyCases.h",
        "src/compiler/translator/tree_ops/PruneInfiniteLoops.h",
        "src/compiler/translator/tree_ops/PruneNoOps.h",
        "src/compiler/translator/tree_ops/RecordConstantPrecision.h",
        "src/compiler/translator/tree_ops/RemoveArrayLengthMethod.h",
        "src/compiler/translator/tree_ops/RemoveAtomicCounterBuiltins.h",
        "src/compiler/translator/tree_ops/RemoveDynamicIndexing.h",
        "src/compiler/translator/tree_ops/RemoveInactiveInterfaceVariables.h",
        "src/compiler/translator/tree_ops/RemoveInvariantDeclaration.h",
        "src/compiler/translator/tree_ops/RemoveUnreferencedVariables.h",
        "src/compiler/translator/tree_ops/RemoveUnusedFramebufferFetch.h",
        "src/compiler/translator/tree_ops/RescopeGlobalVariables.h",
        "src/compiler/translator/tree_ops/RewriteArrayOfArrayOfOpaqueUniforms.h",
        "src/compiler/translator/tree_ops/RewriteAtomicCounters.h",
        "src/compiler/translator/tree_ops/RewriteDfdy.h",
        "src/compiler/translator/tree_ops/RewritePixelLocalStorage.h",
        "src/compiler/translator/tree_ops/RewriteStructSamplers.h",
        "src/compiler/translator/tree_ops/RewriteTexelFetchOffset.h",
        "src/compiler/translator/tree_ops/SeparateDeclarations.h",
        "src/compiler/translator/tree_ops/SeparateStructFromUniformDeclarations.h",
        "src/compiler/translator/tree_ops/SimplifyLoopConditions.h",
        "src/compiler/translator/tree_ops/SplitSequenceOperator.h",
        "src/compiler/translator/tree_ops/glsl/RegenerateStructNames.h",
        "src/compiler/translator/tree_ops/glsl/RewriteRepeatedAssignToSwizzled.h",
        "src/compiler/translator/tree_ops/glsl/ScalarizeVecAndMatConstructorArgs.h",
        "src/compiler/translator/tree_ops/glsl/UseInterfaceBlockFields.h",
        "src/compiler/translator/tree_ops/glsl/apple/AddAndTrueToLoopCondition.h",
        "src/compiler/translator/tree_ops/glsl/apple/RewriteDoWhile.h",
        "src/compiler/translator/tree_ops/glsl/apple/RewriteRowMajorMatrices.h",
        "src/compiler/translator/tree_ops/glsl/apple/RewriteUnaryMinusOperatorFloat.h",
        "src/compiler/translator/tree_ops/glsl/apple/UnfoldShortCircuitAST.h",
        "src/compiler/translator/tree_ops/hlsl/AddDefaultReturnStatements.h",
        "src/compiler/translator/tree_ops/hlsl/AggregateAssignArraysInSSBOs.h",
        "src/compiler/translator/tree_ops/hlsl/AggregateAssignStructsInSSBOs.h",
        "src/compiler/translator/tree_ops/hlsl/ArrayReturnValueToOutParameter.h",
        "src/compiler/translator/tree_ops/hlsl/BreakVariableAliasingInInnerLoops.h",
        "src/compiler/translator/tree_ops/hlsl/ExpandIntegerPowExpressions.h",
        "src/compiler/translator/tree_ops/hlsl/RecordUniformBlocksWithLargeArrayMember.h",
        "src/compiler/translator/tree_ops/hlsl/RemoveSwitchFallThrough.h",
        "src/compiler/translator/tree_ops/hlsl/RewriteAtomicFunctionExpressions.h",
        "src/compiler/translator/tree_ops/hlsl/RewriteElseBlocks.h",
        "src/compiler/translator/tree_ops/hlsl/RewriteExpressionsWithShaderStorageBlock.h",
        "src/compiler/translator/tree_ops/hlsl/RewriteUnaryMinusOperatorInt.h",
        "src/compiler/translator/tree_ops/hlsl/SeparateArrayConstructorStatements.h",
        "src/compiler/translator/tree_ops/hlsl/SeparateArrayInitialization.h",
        "src/compiler/translator/tree_ops/hlsl/SeparateExpressionsReturningArrays.h",
        "src/compiler/translator/tree_ops/hlsl/UnfoldShortCircuitToIf.h",
        "src/compiler/translator/tree_ops/hlsl/WrapSwitchStatementsInBlocks.h",
        "src/compiler/translator/tree_ops/msl/AddExplicitTypeCasts.h",
        "src/compiler/translator/tree_ops/msl/ConvertUnsupportedConstructorsToFunctionCalls.h",
        "src/compiler/translator/tree_ops/msl/FixTypeConstructors.h",
        "src/compiler/translator/tree_ops/msl/GuardFragDepthWrite.h",
        "src/compiler/translator/tree_ops/msl/HoistConstants.h",
        "src/compiler/translator/tree_ops/msl/IntroduceVertexIndexID.h",
        "src/compiler/translator/tree_ops/msl/ReduceInterfaceBlocks.h",
        "src/compiler/translator/tree_ops/msl/RewriteCaseDeclarations.h",
        "src/compiler/translator/tree_ops/msl/RewriteInterpolants.h",
        "src/compiler/translator/tree_ops/msl/RewriteOutArgs.h",
        "src/compiler/translator/tree_ops/msl/RewriteUnaddressableReferences.h",
        "src/compiler/translator/tree_ops/msl/SeparateCompoundExpressions.h",
        "src/compiler/translator/tree_ops/msl/TransposeRowMajorMatrices.h",
        "src/compiler/translator/tree_ops/msl/WrapMain.h",
        "src/compiler/translator/tree_ops/spirv/ClampGLLayer.h",
        "src/compiler/translator/tree_ops/spirv/EmulateAdvancedBlendEquations.h",
        "src/compiler/translator/tree_ops/spirv/EmulateDithering.h",
        "src/compiler/translator/tree_ops/spirv/EmulateFragColorData.h",
        "src/compiler/translator/tree_ops/spirv/EmulateFramebufferFetch.h",
        "src/compiler/translator/tree_ops/spirv/EmulateYUVBuiltIns.h",
        "src/compiler/translator/tree_ops/spirv/FlagSamplersWithTexelFetch.h",
        "src/compiler/translator/tree_ops/spirv/ReswizzleYUVOps.h",
        "src/compiler/translator/tree_ops/spirv/RewriteInterpolateAtOffset.h",
        "src/compiler/translator/tree_ops/spirv/RewriteR32fImages.h",
        "src/compiler/translator/tree_util/BuiltIn.h",
        "src/compiler/translator/tree_util/BuiltIn_autogen.h",
        "src/compiler/translator/tree_util/DriverUniform.h",
        "src/compiler/translator/tree_util/FindFunction.h",
        "src/compiler/translator/tree_util/FindMain.h",
        "src/compiler/translator/tree_util/FindPreciseNodes.h",
        "src/compiler/translator/tree_util/FindSymbolNode.h",
        "src/compiler/translator/tree_util/IntermNodePatternMatcher.h",
        "src/compiler/translator/tree_util/IntermNode_util.h",
        "src/compiler/translator/tree_util/IntermTraverse.h",
        "src/compiler/translator/tree_util/NodeSearch.h",
        "src/compiler/translator/tree_util/ReplaceArrayOfMatrixVarying.h",
        "src/compiler/translator/tree_util/ReplaceClipCullDistanceVariable.h",
        "src/compiler/translator/tree_util/ReplaceShadowingVariables.h",
        "src/compiler/translator/tree_util/ReplaceVariable.h",
        "src/compiler/translator/tree_util/RewriteSampleMaskVariable.h",
        "src/compiler/translator/tree_util/RunAtTheBeginningOfShader.h",
        "src/compiler/translator/tree_util/RunAtTheEndOfShader.h",
        "src/compiler/translator/tree_util/SpecializationConstant.h",
        "src/compiler/translator/tree_util/Visit.h",
        "src/compiler/translator/util.h",
        "src/compiler/translator/wgsl/OutputUniformBlocks.h",
        "src/compiler/translator/wgsl/RewritePipelineVariables.h",
        "src/compiler/translator/wgsl/TranslatorWGSL.h",
        "src/compiler/translator/wgsl/Utils.h",
    ],
    copts = [
        "-Wno-ctad-maybe-unsupported",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/spirv-headers/src/include/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_common_shader_state",
        ":angle_glslang_spirv",
        ":angle_spirv_base",
        ":angle_spirv_builder",
        ":angle_spirv_headers",
        ":angle_translator_headers",
        ":angle_version_info",
        ":includes",
        ":preprocessor",
        "@spirv_tools",
    ],
)

cc_library(
    name = "angle_dma_buf",
    srcs = [
        "src/common/linux/dma_buf_utils.cpp",
    ],
    hdrs = [
        "src/common/linux/dma_buf_utils.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_third_party_vulkan_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_spirv_base",
    srcs = [
        "src/common/spirv/angle_spirv_utils.cpp",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/spirv-headers/src/include/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_glslang_spirv",
        ":angle_spirv_headers",
        "@spirv_tools",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_spirv_builder",
    srcs = [
        "src/common/spirv/spirv_instruction_builder_autogen.cpp",
    ],
    hdrs = [
        "src/common/spirv/spirv_instruction_builder_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/spirv-headers/src/include/",
        "third_party/spirv_headers/include/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_glslang_spirv",
        ":angle_spirv_base",
        ":angle_spirv_headers",
        "//third_party/spirv-headers/src:spirv_cpp_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_spirv_headers",
    hdrs = [
        "src/common/spirv/spirv_types.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_spirv_parser",
    srcs = [
        "src/common/spirv/spirv_instruction_parser_autogen.cpp",
    ],
    hdrs = [
        "src/common/spirv/spirv_instruction_parser_autogen.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/spirv-headers/include/",
        "third_party/spirv-headers/src/include/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_glslang_spirv",
        ":angle_spirv_base",
        ":angle_spirv_headers",
        "//third_party/spirv-headers/src:spirv_cpp_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_libvulkan_loader",
    srcs = [
        "src/common/vulkan/libvulkan_loader.cpp",
    ],
    hdrs = [
        "src/common/vulkan/libvulkan_loader.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_vulkan_entry_points",
    linkstatic = True,
    deps = [
        ":angle_vulkan_headers",
    ],
)

cc_library(
    name = "angle_vulkan_headers",
    hdrs = [
        "src/common/vulkan/vk_headers.h",
    ],
    includes = [
        "include/",
        "src/",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_volk",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_vulkan_icd",
    srcs = [
        "src/common/vulkan/vulkan_icd.cpp",
    ],
    hdrs = [
        "src/common/vulkan/vulkan_icd.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        'ANGLE_VK_LAYERS_DIR=\\"angledata\\"',
        'ANGLE_VK_MOCK_ICD_JSON=\\"angledata/VkICD_mock_icd.json\\"',
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_common",
        ":angle_volk",
        ":angle_vulkan_headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "vulkan",
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
    ],
    deps = [
        ":angle_volk",
        ":angle_vulkan_entry_points",
        ":angle_vulkan_headers",
        ":angle_vulkan_icd",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_vk_mem_alloc_wrapper",
    srcs = [
        "src/libANGLE/renderer/vulkan/vk_mem_alloc_wrapper.cpp",
    ],
    hdrs = [
        "src/libANGLE/renderer/vulkan/vk_mem_alloc_wrapper.h",
    ],
    includes = [
        "include/",
        "src/",
        "third_party/vulkan-headers/src/include/",
        "third_party/vulkan_memory_allocator/include/",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "VMA_DYNAMIC_VULKAN_FUNCTIONS=0",
        "VMA_STATIC_VULKAN_FUNCTIONS=0",
        "VMA_USE_STL_CONTAINERS=1",
    ],
    deps = [
        ":angle_volk",
        ":angle_vulkan_headers",
        ":angle_vulkan_memory_allocator",
    ],
    alwayslink = True,
)

cc_library(
    name = "angle_vulkan_memory_allocator",
    srcs = [
        "third_party/vulkan_memory_allocator/vma.cpp",
    ],
    hdrs = [
        "third_party/vulkan_memory_allocator/include/vk_mem_alloc.h",
    ],
    defines = [
        "VMA_DYNAMIC_VULKAN_FUNCTIONS=0",
        "VMA_STATIC_VULKAN_FUNCTIONS=0",
        "VMA_USE_STL_CONTAINERS=1",
    ],
    strip_include_prefix = "third_party/vulkan_memory_allocator/include",
    deps = [
        ":angle_third_party_vulkan_headers",
    ],
)

cc_library(
    name = "angle_vulkan_backend",
    srcs = [
        "src/libANGLE/renderer/vulkan/AllocatorHelperPool.cpp",
        "src/libANGLE/renderer/vulkan/AllocatorHelperRing.cpp",
        "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "src/libANGLE/renderer/vulkan/CommandQueue.cpp",
        "src/libANGLE/renderer/vulkan/CompilerVk.cpp",
        "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "src/libANGLE/renderer/vulkan/DebugAnnotatorVk.cpp",
        "src/libANGLE/renderer/vulkan/DeviceVk.cpp",
        "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "src/libANGLE/renderer/vulkan/FenceNVVk.cpp",
        "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "src/libANGLE/renderer/vulkan/ImageVk.cpp",
        "src/libANGLE/renderer/vulkan/MemoryObjectVk.cpp",
        "src/libANGLE/renderer/vulkan/MemoryTracking.cpp",
        "src/libANGLE/renderer/vulkan/OverlayVk.cpp",
        "src/libANGLE/renderer/vulkan/PersistentCommandPool.cpp",
        "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "src/libANGLE/renderer/vulkan/RenderbufferVk.cpp",
        "src/libANGLE/renderer/vulkan/SamplerVk.cpp",
        "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.cpp",
        "src/libANGLE/renderer/vulkan/SecondaryCommandPool.cpp",
        "src/libANGLE/renderer/vulkan/SemaphoreVk.cpp",
        "src/libANGLE/renderer/vulkan/ShaderInterfaceVariableInfoMap.cpp",
        "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "src/libANGLE/renderer/vulkan/ShareGroupVk.cpp",
        "src/libANGLE/renderer/vulkan/Suballocation.cpp",
        "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "src/libANGLE/renderer/vulkan/VkImageImageSiblingVk.cpp",
        "src/libANGLE/renderer/vulkan/VulkanSecondaryCommandBuffer.cpp",
        "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "src/libANGLE/renderer/vulkan/linux/DeviceVkLinux.cpp",
        "src/libANGLE/renderer/vulkan/linux/DisplayVkLinux.cpp",
        "src/libANGLE/renderer/vulkan/linux/DisplayVkOffscreen.cpp",
        "src/libANGLE/renderer/vulkan/linux/DmaBufImageSiblingVkLinux.cpp",
        "src/libANGLE/renderer/vulkan/linux/display/DisplayVkSimple.cpp",
        "src/libANGLE/renderer/vulkan/linux/display/WindowSurfaceVkSimple.cpp",
        "src/libANGLE/renderer/vulkan/linux/headless/DisplayVkHeadless.cpp",
        "src/libANGLE/renderer/vulkan/linux/headless/WindowSurfaceVkHeadless.cpp",
        "src/libANGLE/renderer/vulkan/spv_utils.cpp",
        "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "src/libANGLE/renderer/vulkan/vk_format_table_autogen.cpp",
        "src/libANGLE/renderer/vulkan/vk_format_utils.cpp",
        "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "src/libANGLE/renderer/vulkan/vk_internal_shaders_autogen.cpp",
        "src/libANGLE/renderer/vulkan/vk_mandatory_format_support_table_autogen.cpp",
        "src/libANGLE/renderer/vulkan/vk_ref_counted_event.cpp",
        "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "src/libANGLE/renderer/vulkan/vk_resource.cpp",
        "src/libANGLE/renderer/vulkan/vk_utils.cpp",
    ],
    hdrs = [
        "src/libANGLE/renderer/vulkan/AllocatorHelperPool.h",
        "src/libANGLE/renderer/vulkan/AllocatorHelperRing.h",
        "src/libANGLE/renderer/vulkan/BufferVk.h",
        "src/libANGLE/renderer/vulkan/CommandQueue.h",
        "src/libANGLE/renderer/vulkan/CompilerVk.h",
        "src/libANGLE/renderer/vulkan/ContextVk.h",
        "src/libANGLE/renderer/vulkan/DebugAnnotatorVk.h",
        "src/libANGLE/renderer/vulkan/DeviceVk.h",
        "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "src/libANGLE/renderer/vulkan/DisplayVk_api.h",
        "src/libANGLE/renderer/vulkan/FenceNVVk.h",
        "src/libANGLE/renderer/vulkan/FramebufferVk.h",
        "src/libANGLE/renderer/vulkan/ImageVk.h",
        "src/libANGLE/renderer/vulkan/MemoryObjectVk.h",
        "src/libANGLE/renderer/vulkan/MemoryTracking.h",
        "src/libANGLE/renderer/vulkan/OverlayVk.h",
        "src/libANGLE/renderer/vulkan/PersistentCommandPool.h",
        "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "src/libANGLE/renderer/vulkan/ProgramPipelineVk.h",
        "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "src/libANGLE/renderer/vulkan/QueryVk.h",
        "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "src/libANGLE/renderer/vulkan/RenderbufferVk.h",
        "src/libANGLE/renderer/vulkan/SamplerVk.h",
        "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "src/libANGLE/renderer/vulkan/SecondaryCommandPool.h",
        "src/libANGLE/renderer/vulkan/SemaphoreVk.h",
        "src/libANGLE/renderer/vulkan/ShaderInterfaceVariableInfoMap.h",
        "src/libANGLE/renderer/vulkan/ShaderVk.h",
        "src/libANGLE/renderer/vulkan/ShareGroupVk.h",
        "src/libANGLE/renderer/vulkan/Suballocation.h",
        "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "src/libANGLE/renderer/vulkan/SyncVk.h",
        "src/libANGLE/renderer/vulkan/TextureVk.h",
        "src/libANGLE/renderer/vulkan/TransformFeedbackVk.h",
        "src/libANGLE/renderer/vulkan/UtilsVk.h",
        "src/libANGLE/renderer/vulkan/VertexArrayVk.h",
        "src/libANGLE/renderer/vulkan/VkImageImageSiblingVk.h",
        "src/libANGLE/renderer/vulkan/VulkanSecondaryCommandBuffer.h",
        "src/libANGLE/renderer/vulkan/android/vk_android_utils.h",
        "src/libANGLE/renderer/vulkan/linux/DeviceVkLinux.h",
        "src/libANGLE/renderer/vulkan/linux/DisplayVkLinux.h",
        "src/libANGLE/renderer/vulkan/linux/DisplayVkOffscreen.h",
        "src/libANGLE/renderer/vulkan/linux/DmaBufImageSiblingVkLinux.h",
        "src/libANGLE/renderer/vulkan/linux/display/DisplayVkSimple.h",
        "src/libANGLE/renderer/vulkan/linux/display/WindowSurfaceVkSimple.h",
        "src/libANGLE/renderer/vulkan/linux/headless/DisplayVkHeadless.h",
        "src/libANGLE/renderer/vulkan/linux/headless/WindowSurfaceVkHeadless.h",
        "src/libANGLE/renderer/vulkan/shaders/gen/Blit3DSrc.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/Blit3DSrc.frag.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/Blit3DSrc.frag.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000004.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000005.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000006.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000007.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000008.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000009.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000B.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000C.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000D.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000E.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.0000000F.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000010.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000011.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000012.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000013.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000014.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000015.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000016.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolve.frag.00000017.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolveStencilNoExport.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolveStencilNoExport.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolveStencilNoExport.comp.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/BlitResolveStencilNoExport.comp.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndex.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndex.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndex.comp.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndex.comp.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndexIndirectLineLoop.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndexIndirectLineLoop.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndexIndirectLineLoop.comp.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertIndirectLineLoop.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000004.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000005.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000006.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.00000007.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/CopyImageToBuffer.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/CopyImageToBuffer.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/EtcToBc.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/EtcToBc.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ExportStencil.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/FullScreenTri.vert.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateFragmentShadingRate.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000004.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000005.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000006.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000007.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000008.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/GenerateMipmap.comp.00000009.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000003.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000004.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000005.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000006.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000007.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000008.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000009.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000B.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000C.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000D.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000E.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000000F.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000010.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000011.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000012.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000013.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000014.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000015.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000016.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000017.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000018.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000019.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001B.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001C.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001D.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001E.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000001F.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000020.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000021.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000022.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000023.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000024.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000025.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000026.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000027.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000028.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.00000029.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002B.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002C.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002D.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002E.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageClear.frag.0000002F.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000002.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000004.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000005.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000006.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000008.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000009.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.0000000A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000010.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000011.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000012.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000014.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000015.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000016.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000018.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000019.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.0000001A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000020.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000021.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000022.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000024.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000025.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000026.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000028.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.00000029.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopy.frag.0000002A.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopyFloat.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/ImageCopyFloat.frag.00000001.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/OverlayDraw.frag.00000000.inc",
        "src/libANGLE/renderer/vulkan/shaders/gen/OverlayDraw.vert.00000000.inc",
        "src/libANGLE/renderer/vulkan/spv_utils.h",
        "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "src/libANGLE/renderer/vulkan/vk_caps_utils.h",
        "src/libANGLE/renderer/vulkan/vk_command_buffer_utils.h",
        "src/libANGLE/renderer/vulkan/vk_format_utils.h",
        "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "src/libANGLE/renderer/vulkan/vk_internal_shaders_autogen.h",
        "src/libANGLE/renderer/vulkan/vk_ref_counted_event.h",
        "src/libANGLE/renderer/vulkan/vk_renderer.h",
        "src/libANGLE/renderer/vulkan/vk_resource.h",
        "src/libANGLE/renderer/vulkan/vk_utils.h",
        "src/libANGLE/renderer/vulkan/vk_wrapper.h",
    ],
    includes = [
        "include/",
        "src/",
        "src/common/base/",
        "src/common/third_party/xxhash",
        "third_party/spirv-headers/src/include/",
        "third_party/vulkan-headers/src/include",
    ],
    linkstatic = True,
    local_defines = [
        "ANGLE_ENABLE_CONTEXT_MUTEX=1",
        "ANGLE_ENABLE_CRC_FOR_PIPELINE_CACHE",
        "ANGLE_ENABLE_SHARE_CONTEXT_LOCK=1",
        "ANGLE_ENABLE_VULKAN",
        "ANGLE_ENABLE_VULKAN_SHARED_RING_BUFFER_CMD_ALLOC=false",
        "ANGLE_IS_LINUX",
        "ANGLE_OUTSIDE_WEBKIT",
        "ANGLE_PLATFORM_EXPORT=",
        "ANGLE_SHARED_LIBVULKAN=1",
        "ANGLE_USE_CUSTOM_VULKAN_OUTSIDE_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_CUSTOM_VULKAN_RENDER_PASS_CMD_BUFFERS=1",
        "ANGLE_USE_VULKAN_DISPLAY",
        "ANGLE_VULKAN_DISPLAY_MODE_OFFSCREEN",
        "EGL_NO_X11",
        "LIBANGLE_IMPLEMENTATION",
    ],
    deps = [
        ":angle_compression",
        ":angle_dma_buf",
        ":angle_glslang_spirv",
        ":angle_gpu_info_util",
        ":angle_image_util",
        ":angle_libvulkan_loader",
        ":angle_spirv_base",
        ":angle_spirv_builder",
        ":angle_spirv_headers",
        ":angle_spirv_parser",
        ":angle_vk_mem_alloc_wrapper",
        ":angle_volk",
        ":angle_vulkan_entry_points",
        ":angle_vulkan_headers",
        ":libangle_headers",
        ":vulkan",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
    alwayslink = True,
)

cc_shared_library(
    name = "libEGL",
    additional_linker_inputs = [
        "@//third_party/angle:libEGL_angle.lds",
    ],
    shared_lib_name = "libEGL.so",
    user_link_flags = [
        "-ldl",
        "-Wl,--gc-sections",
        "-Wl,--no-undefined",
        "-Wl,-rpath=$$ORIGIN",
        "-Wl,--version-script=$(location @//third_party/angle:libEGL_angle.lds)",
    ],
    deps = [
        ":libegl",
    ],
)

cc_shared_library(
    name = "libGLESv2",
    additional_linker_inputs = [
        "@//third_party/angle:libGLESv2_angle.lds",
    ],
    shared_lib_name = "libGLESv2.so",
    user_link_flags = [
        "-ldl",
        "-Wl,--gc-sections",
        "-Wl,--no-undefined",
        "-Wl,-rpath=$$ORIGIN",
        "-Wl,--version-script=$(location @//third_party/angle:libGLESv2_angle.lds)",
    ],
    deps = [
        ":libglesv2",
    ],
)
