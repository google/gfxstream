// Copyright 2025 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expresso or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Auto-generated with: ./scripts/gen-entries.py --mode=static_translator_namespaced_stubs host/gl/OpenGLESDispatch/gles2_stubbed_in_translator_namespace.entries --output=host/gl/OpenGLESDispatch/gles2_stubbed_in_translator_namespace.cpp
// DO NOT EDIT THIS FILE

#include <GLES2/gl2.h>
#include <GL/GLcorearb.h>
namespace translator {
namespace gles2 {
GL_APICALL void GL_APIENTRY glClearDepth(GLclampd) { return; }
GL_APICALL void GL_APIENTRY glDepthRange(GLclampd, GLclampd) { return; }
GL_APICALL void GL_APIENTRY glPushAttrib(GLbitfield) { return; }
GL_APICALL void GL_APIENTRY glPushClientAttrib(GLbitfield) { return; }
GL_APICALL void GL_APIENTRY glPopAttrib() { return; }
GL_APICALL void GL_APIENTRY glPopClientAttrib() { return; }
GL_APICALL GLboolean GL_APIENTRY glIsRenderbufferEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glBindRenderbufferEXT(GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glDeleteRenderbuffersEXT(GLsizei, const GLuint *) { return; }
GL_APICALL void GL_APIENTRY glGenRenderbuffersEXT(GLsizei, GLuint *) { return; }
GL_APICALL void GL_APIENTRY glRenderbufferStorageEXT(GLenum, GLenum, GLsizei, GLsizei) { return; }
GL_APICALL void GL_APIENTRY glGetRenderbufferParameterivEXT(GLenum, GLenum, GLint *) { return; }
GL_APICALL GLboolean GL_APIENTRY glIsFramebufferEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glBindFramebufferEXT(GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glDeleteFramebuffersEXT(GLsizei, const GLuint *) { return; }
GL_APICALL void GL_APIENTRY glGenFramebuffersEXT(GLsizei, GLuint *) { return; }
GL_APICALL GLenum GL_APIENTRY glCheckFramebufferStatusEXT(GLenum) { return (GLenum)0; }
GL_APICALL void GL_APIENTRY glFramebufferTexture1DEXT(GLenum, GLenum, GLenum, GLuint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture2DEXT(GLenum, GLenum, GLenum, GLuint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture3DEXT(GLenum, GLenum, GLenum, GLuint, GLint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferRenderbufferEXT(GLenum, GLenum, GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glGetFramebufferAttachmentParameterivEXT(GLenum, GLenum, GLenum, GLint *) { return; }
GL_APICALL void GL_APIENTRY glGenerateMipmapEXT(GLenum) { return; }
GL_APICALL void GL_APIENTRY glReadnPixelsEXT(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *) { return; }
GL_APICALL void GL_APIENTRY glGetnUniformfvEXT(GLuint, GLint, GLsizei, float *) { return; }
GL_APICALL void GL_APIENTRY glGetnUniformivEXT(GLuint, GLint, GLsizei, GLint *) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture3DOES(GLenum, GLenum, GLenum, GLuint, GLint, GLint) { return; }
} // namespace gles2
} // namespace translator
