// Copyright 2025 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expresso or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Auto-generated with: ./scripts/gen-entries.py --mode=static_translator_namespaced_header host/gl/OpenGLESDispatch/gles32_only.entries --output=host/gl/OpenGLESDispatch/include/OpenGLESDispatch/gles32_only_static_translator_namespaced_header.h
// DO NOT EDIT THIS FILE

#pragma once

#include <GLES/gl.h>
#include <GLES3/gl3.h>
#include <GLES3/gl32.h>

// The definitions of `GLDEBUGPROC` and `GLDEBUGPROCKHR` are unfortunately both
// protected by the same `ifndef GL_KHR_debug` which will cause files which
// include both to only have one of the two type definitions. The definition of
// GLDEBUGPROC is also different between desktop GL and GLES 3.2. Define our own
// typedefs here to work around this issue.
typedef void (*GFXSTREAM_GLES32_GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

namespace translator {
namespace gles2 {
GL_APICALL void GL_APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
GL_APICALL void GL_APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
GL_APICALL void GL_APIENTRY glDebugMessageCallback(GFXSTREAM_GLES32_GLDEBUGPROC callback, const void * userParam);
GL_APICALL GLuint GL_APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
GL_APICALL void GL_APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar* message);
GL_APICALL void GL_APIENTRY glPopDebugGroup();
} // namespace translator
} // namespace gles2
